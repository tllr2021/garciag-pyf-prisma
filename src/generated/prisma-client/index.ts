// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  card: (where?: CardWhereInput) => Promise<boolean>;
  employee: (where?: EmployeeWhereInput) => Promise<boolean>;
  movie: (where?: MovieWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  productSale: (where?: ProductSaleWhereInput) => Promise<boolean>;
  seat: (where?: SeatWhereInput) => Promise<boolean>;
  theater: (where?: TheaterWhereInput) => Promise<boolean>;
  theaterRoom: (where?: TheaterRoomWhereInput) => Promise<boolean>;
  ticket: (where?: TicketWhereInput) => Promise<boolean>;
  ticketSale: (where?: TicketSaleWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  card: (where: CardWhereUniqueInput) => CardNullablePromise;
  cards: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Card>;
  cardsConnection: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CardConnectionPromise;
  employee: (where: EmployeeWhereUniqueInput) => EmployeeNullablePromise;
  employees: (args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Employee>;
  employeesConnection: (args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmployeeConnectionPromise;
  movie: (where: MovieWhereUniqueInput) => MovieNullablePromise;
  movies: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Movie>;
  moviesConnection: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MovieConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  productSale: (
    where: ProductSaleWhereUniqueInput
  ) => ProductSaleNullablePromise;
  productSales: (args?: {
    where?: ProductSaleWhereInput;
    orderBy?: ProductSaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProductSale>;
  productSalesConnection: (args?: {
    where?: ProductSaleWhereInput;
    orderBy?: ProductSaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductSaleConnectionPromise;
  seat: (where: SeatWhereUniqueInput) => SeatNullablePromise;
  seats: (args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Seat>;
  seatsConnection: (args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SeatConnectionPromise;
  theater: (where: TheaterWhereUniqueInput) => TheaterNullablePromise;
  theaters: (args?: {
    where?: TheaterWhereInput;
    orderBy?: TheaterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Theater>;
  theatersConnection: (args?: {
    where?: TheaterWhereInput;
    orderBy?: TheaterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TheaterConnectionPromise;
  theaterRoom: (
    where: TheaterRoomWhereUniqueInput
  ) => TheaterRoomNullablePromise;
  theaterRooms: (args?: {
    where?: TheaterRoomWhereInput;
    orderBy?: TheaterRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TheaterRoom>;
  theaterRoomsConnection: (args?: {
    where?: TheaterRoomWhereInput;
    orderBy?: TheaterRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TheaterRoomConnectionPromise;
  ticket: (where: TicketWhereUniqueInput) => TicketNullablePromise;
  tickets: (args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ticket>;
  ticketsConnection: (args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TicketConnectionPromise;
  ticketSale: (where: TicketSaleWhereUniqueInput) => TicketSaleNullablePromise;
  ticketSales: (args?: {
    where?: TicketSaleWhereInput;
    orderBy?: TicketSaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TicketSale>;
  ticketSalesConnection: (args?: {
    where?: TicketSaleWhereInput;
    orderBy?: TicketSaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TicketSaleConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCard: (data: CardCreateInput) => CardPromise;
  updateCard: (args: {
    data: CardUpdateInput;
    where: CardWhereUniqueInput;
  }) => CardPromise;
  updateManyCards: (args: {
    data: CardUpdateManyMutationInput;
    where?: CardWhereInput;
  }) => BatchPayloadPromise;
  upsertCard: (args: {
    where: CardWhereUniqueInput;
    create: CardCreateInput;
    update: CardUpdateInput;
  }) => CardPromise;
  deleteCard: (where: CardWhereUniqueInput) => CardPromise;
  deleteManyCards: (where?: CardWhereInput) => BatchPayloadPromise;
  createEmployee: (data: EmployeeCreateInput) => EmployeePromise;
  updateEmployee: (args: {
    data: EmployeeUpdateInput;
    where: EmployeeWhereUniqueInput;
  }) => EmployeePromise;
  updateManyEmployees: (args: {
    data: EmployeeUpdateManyMutationInput;
    where?: EmployeeWhereInput;
  }) => BatchPayloadPromise;
  upsertEmployee: (args: {
    where: EmployeeWhereUniqueInput;
    create: EmployeeCreateInput;
    update: EmployeeUpdateInput;
  }) => EmployeePromise;
  deleteEmployee: (where: EmployeeWhereUniqueInput) => EmployeePromise;
  deleteManyEmployees: (where?: EmployeeWhereInput) => BatchPayloadPromise;
  createMovie: (data: MovieCreateInput) => MoviePromise;
  updateMovie: (args: {
    data: MovieUpdateInput;
    where: MovieWhereUniqueInput;
  }) => MoviePromise;
  updateManyMovies: (args: {
    data: MovieUpdateManyMutationInput;
    where?: MovieWhereInput;
  }) => BatchPayloadPromise;
  upsertMovie: (args: {
    where: MovieWhereUniqueInput;
    create: MovieCreateInput;
    update: MovieUpdateInput;
  }) => MoviePromise;
  deleteMovie: (where: MovieWhereUniqueInput) => MoviePromise;
  deleteManyMovies: (where?: MovieWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createProductSale: (data: ProductSaleCreateInput) => ProductSalePromise;
  updateProductSale: (args: {
    data: ProductSaleUpdateInput;
    where: ProductSaleWhereUniqueInput;
  }) => ProductSalePromise;
  updateManyProductSales: (args: {
    data: ProductSaleUpdateManyMutationInput;
    where?: ProductSaleWhereInput;
  }) => BatchPayloadPromise;
  upsertProductSale: (args: {
    where: ProductSaleWhereUniqueInput;
    create: ProductSaleCreateInput;
    update: ProductSaleUpdateInput;
  }) => ProductSalePromise;
  deleteProductSale: (where: ProductSaleWhereUniqueInput) => ProductSalePromise;
  deleteManyProductSales: (
    where?: ProductSaleWhereInput
  ) => BatchPayloadPromise;
  createSeat: (data: SeatCreateInput) => SeatPromise;
  updateSeat: (args: {
    data: SeatUpdateInput;
    where: SeatWhereUniqueInput;
  }) => SeatPromise;
  updateManySeats: (args: {
    data: SeatUpdateManyMutationInput;
    where?: SeatWhereInput;
  }) => BatchPayloadPromise;
  upsertSeat: (args: {
    where: SeatWhereUniqueInput;
    create: SeatCreateInput;
    update: SeatUpdateInput;
  }) => SeatPromise;
  deleteSeat: (where: SeatWhereUniqueInput) => SeatPromise;
  deleteManySeats: (where?: SeatWhereInput) => BatchPayloadPromise;
  createTheater: (data: TheaterCreateInput) => TheaterPromise;
  updateTheater: (args: {
    data: TheaterUpdateInput;
    where: TheaterWhereUniqueInput;
  }) => TheaterPromise;
  updateManyTheaters: (args: {
    data: TheaterUpdateManyMutationInput;
    where?: TheaterWhereInput;
  }) => BatchPayloadPromise;
  upsertTheater: (args: {
    where: TheaterWhereUniqueInput;
    create: TheaterCreateInput;
    update: TheaterUpdateInput;
  }) => TheaterPromise;
  deleteTheater: (where: TheaterWhereUniqueInput) => TheaterPromise;
  deleteManyTheaters: (where?: TheaterWhereInput) => BatchPayloadPromise;
  createTheaterRoom: (data: TheaterRoomCreateInput) => TheaterRoomPromise;
  updateTheaterRoom: (args: {
    data: TheaterRoomUpdateInput;
    where: TheaterRoomWhereUniqueInput;
  }) => TheaterRoomPromise;
  updateManyTheaterRooms: (args: {
    data: TheaterRoomUpdateManyMutationInput;
    where?: TheaterRoomWhereInput;
  }) => BatchPayloadPromise;
  upsertTheaterRoom: (args: {
    where: TheaterRoomWhereUniqueInput;
    create: TheaterRoomCreateInput;
    update: TheaterRoomUpdateInput;
  }) => TheaterRoomPromise;
  deleteTheaterRoom: (where: TheaterRoomWhereUniqueInput) => TheaterRoomPromise;
  deleteManyTheaterRooms: (
    where?: TheaterRoomWhereInput
  ) => BatchPayloadPromise;
  createTicket: (data: TicketCreateInput) => TicketPromise;
  updateTicket: (args: {
    data: TicketUpdateInput;
    where: TicketWhereUniqueInput;
  }) => TicketPromise;
  updateManyTickets: (args: {
    data: TicketUpdateManyMutationInput;
    where?: TicketWhereInput;
  }) => BatchPayloadPromise;
  upsertTicket: (args: {
    where: TicketWhereUniqueInput;
    create: TicketCreateInput;
    update: TicketUpdateInput;
  }) => TicketPromise;
  deleteTicket: (where: TicketWhereUniqueInput) => TicketPromise;
  deleteManyTickets: (where?: TicketWhereInput) => BatchPayloadPromise;
  createTicketSale: (data: TicketSaleCreateInput) => TicketSalePromise;
  updateTicketSale: (args: {
    data: TicketSaleUpdateInput;
    where: TicketSaleWhereUniqueInput;
  }) => TicketSalePromise;
  updateManyTicketSales: (args: {
    data: TicketSaleUpdateManyMutationInput;
    where?: TicketSaleWhereInput;
  }) => BatchPayloadPromise;
  upsertTicketSale: (args: {
    where: TicketSaleWhereUniqueInput;
    create: TicketSaleCreateInput;
    update: TicketSaleUpdateInput;
  }) => TicketSalePromise;
  deleteTicketSale: (where: TicketSaleWhereUniqueInput) => TicketSalePromise;
  deleteManyTicketSales: (where?: TicketSaleWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  card: (
    where?: CardSubscriptionWhereInput
  ) => CardSubscriptionPayloadSubscription;
  employee: (
    where?: EmployeeSubscriptionWhereInput
  ) => EmployeeSubscriptionPayloadSubscription;
  movie: (
    where?: MovieSubscriptionWhereInput
  ) => MovieSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  productSale: (
    where?: ProductSaleSubscriptionWhereInput
  ) => ProductSaleSubscriptionPayloadSubscription;
  seat: (
    where?: SeatSubscriptionWhereInput
  ) => SeatSubscriptionPayloadSubscription;
  theater: (
    where?: TheaterSubscriptionWhereInput
  ) => TheaterSubscriptionPayloadSubscription;
  theaterRoom: (
    where?: TheaterRoomSubscriptionWhereInput
  ) => TheaterRoomSubscriptionPayloadSubscription;
  ticket: (
    where?: TicketSubscriptionWhereInput
  ) => TicketSubscriptionPayloadSubscription;
  ticketSale: (
    where?: TicketSaleSubscriptionWhereInput
  ) => TicketSaleSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "expiration_ASC"
  | "expiration_DESC"
  | "active_ASC"
  | "active_DESC"
  | "points_ASC"
  | "points_DESC";

export type EmployeeStatus = "ACTIVE" | "INACTIVE" | "ON_VACATION";

export type EmployeeArea = "CANDY" | "TICKETS" | "SANITIZE" | "ROOM_CLEANING";

export type Days =
  | "MONDAY"
  | "TUESDAY"
  | "WEDNESDAY"
  | "THURSDAY"
  | "FRIDAY"
  | "SATURDAY"
  | "SUNDAY";

export type Rating = "G" | "PG" | "PG13" | "R" | "NC17";

export type MovieOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "director_ASC"
  | "director_DESC"
  | "description_ASC"
  | "description_DESC"
  | "length_ASC"
  | "length_DESC"
  | "rating_ASC"
  | "rating_DESC";

export type Genre =
  | "HORROR"
  | "COMEDY"
  | "ACTION"
  | "SCIFI"
  | "SUSPENSE"
  | "ANIMATION"
  | "THRILLER"
  | "WESTERN";

export type TheaterType = "VIP" | "NORMAL" | "THREED";

export type TheaterRoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "numberOfSeats_ASC"
  | "numberOfSeats_DESC"
  | "price_ASC"
  | "price_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SeatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "row_ASC"
  | "row_DESC"
  | "number_ASC"
  | "number_DESC"
  | "isOcuppied_ASC"
  | "isOcuppied_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EmployeeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "payrollNumber_ASC"
  | "payrollNumber_DESC"
  | "status_ASC"
  | "status_DESC"
  | "paymentDue_ASC"
  | "paymentDue_DESC"
  | "area_ASC"
  | "area_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "stock_ASC"
  | "stock_DESC"
  | "price_ASC"
  | "price_DESC";

export type ProductSaleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "total_ASC"
  | "total_DESC";

export type TheaterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "state_ASC"
  | "state_DESC"
  | "city_ASC"
  | "city_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TicketOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "client_ASC"
  | "client_DESC"
  | "total_ASC"
  | "total_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TicketSaleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "total_ASC"
  | "total_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isMember_ASC"
  | "isMember_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  expiration?: Maybe<DateTimeInput>;
  expiration_not?: Maybe<DateTimeInput>;
  expiration_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiration_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiration_lt?: Maybe<DateTimeInput>;
  expiration_lte?: Maybe<DateTimeInput>;
  expiration_gt?: Maybe<DateTimeInput>;
  expiration_gte?: Maybe<DateTimeInput>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  points?: Maybe<Int>;
  points_not?: Maybe<Int>;
  points_in?: Maybe<Int[] | Int>;
  points_not_in?: Maybe<Int[] | Int>;
  points_lt?: Maybe<Int>;
  points_lte?: Maybe<Int>;
  points_gt?: Maybe<Int>;
  points_gte?: Maybe<Int>;
  AND?: Maybe<CardWhereInput[] | CardWhereInput>;
}

export type EmployeeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  payrollNumber?: Maybe<Int>;
}>;

export interface MovieWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  director?: Maybe<String>;
  director_not?: Maybe<String>;
  director_in?: Maybe<String[] | String>;
  director_not_in?: Maybe<String[] | String>;
  director_lt?: Maybe<String>;
  director_lte?: Maybe<String>;
  director_gt?: Maybe<String>;
  director_gte?: Maybe<String>;
  director_contains?: Maybe<String>;
  director_not_contains?: Maybe<String>;
  director_starts_with?: Maybe<String>;
  director_not_starts_with?: Maybe<String>;
  director_ends_with?: Maybe<String>;
  director_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  length?: Maybe<Int>;
  length_not?: Maybe<Int>;
  length_in?: Maybe<Int[] | Int>;
  length_not_in?: Maybe<Int[] | Int>;
  length_lt?: Maybe<Int>;
  length_lte?: Maybe<Int>;
  length_gt?: Maybe<Int>;
  length_gte?: Maybe<Int>;
  rating?: Maybe<Rating>;
  rating_not?: Maybe<Rating>;
  rating_in?: Maybe<Rating[] | Rating>;
  rating_not_in?: Maybe<Rating[] | Rating>;
  AND?: Maybe<MovieWhereInput[] | MovieWhereInput>;
}

export interface TheaterRoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<Int>;
  name_not?: Maybe<Int>;
  name_in?: Maybe<Int[] | Int>;
  name_not_in?: Maybe<Int[] | Int>;
  name_lt?: Maybe<Int>;
  name_lte?: Maybe<Int>;
  name_gt?: Maybe<Int>;
  name_gte?: Maybe<Int>;
  numberOfSeats?: Maybe<Int>;
  numberOfSeats_not?: Maybe<Int>;
  numberOfSeats_in?: Maybe<Int[] | Int>;
  numberOfSeats_not_in?: Maybe<Int[] | Int>;
  numberOfSeats_lt?: Maybe<Int>;
  numberOfSeats_lte?: Maybe<Int>;
  numberOfSeats_gt?: Maybe<Int>;
  numberOfSeats_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  seats_some?: Maybe<SeatWhereInput>;
  type?: Maybe<TheaterType>;
  type_not?: Maybe<TheaterType>;
  type_in?: Maybe<TheaterType[] | TheaterType>;
  type_not_in?: Maybe<TheaterType[] | TheaterType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TheaterRoomWhereInput[] | TheaterRoomWhereInput>;
}

export interface SeatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  row?: Maybe<String>;
  row_not?: Maybe<String>;
  row_in?: Maybe<String[] | String>;
  row_not_in?: Maybe<String[] | String>;
  row_lt?: Maybe<String>;
  row_lte?: Maybe<String>;
  row_gt?: Maybe<String>;
  row_gte?: Maybe<String>;
  row_contains?: Maybe<String>;
  row_not_contains?: Maybe<String>;
  row_starts_with?: Maybe<String>;
  row_not_starts_with?: Maybe<String>;
  row_ends_with?: Maybe<String>;
  row_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  isOcuppied?: Maybe<Boolean>;
  isOcuppied_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SeatWhereInput[] | SeatWhereInput>;
}

export interface EmployeeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  payrollNumber?: Maybe<Int>;
  payrollNumber_not?: Maybe<Int>;
  payrollNumber_in?: Maybe<Int[] | Int>;
  payrollNumber_not_in?: Maybe<Int[] | Int>;
  payrollNumber_lt?: Maybe<Int>;
  payrollNumber_lte?: Maybe<Int>;
  payrollNumber_gt?: Maybe<Int>;
  payrollNumber_gte?: Maybe<Int>;
  status?: Maybe<EmployeeStatus>;
  status_not?: Maybe<EmployeeStatus>;
  status_in?: Maybe<EmployeeStatus[] | EmployeeStatus>;
  status_not_in?: Maybe<EmployeeStatus[] | EmployeeStatus>;
  paymentDue?: Maybe<Float>;
  paymentDue_not?: Maybe<Float>;
  paymentDue_in?: Maybe<Float[] | Float>;
  paymentDue_not_in?: Maybe<Float[] | Float>;
  paymentDue_lt?: Maybe<Float>;
  paymentDue_lte?: Maybe<Float>;
  paymentDue_gt?: Maybe<Float>;
  paymentDue_gte?: Maybe<Float>;
  area?: Maybe<EmployeeArea>;
  area_not?: Maybe<EmployeeArea>;
  area_in?: Maybe<EmployeeArea[] | EmployeeArea>;
  area_not_in?: Maybe<EmployeeArea[] | EmployeeArea>;
  theater?: Maybe<TheaterWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EmployeeWhereInput[] | EmployeeWhereInput>;
}

export interface TheaterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  billboard_some?: Maybe<MovieWhereInput>;
  theaterRooms_some?: Maybe<TheaterRoomWhereInput>;
  employees_some?: Maybe<EmployeeWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TheaterWhereInput[] | TheaterWhereInput>;
}

export type MovieWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  stock?: Maybe<Int>;
  stock_not?: Maybe<Int>;
  stock_in?: Maybe<Int[] | Int>;
  stock_not_in?: Maybe<Int[] | Int>;
  stock_lt?: Maybe<Int>;
  stock_lte?: Maybe<Int>;
  stock_gt?: Maybe<Int>;
  stock_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export type ProductSaleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductSaleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  theater?: Maybe<TheaterWhereInput>;
  user?: Maybe<UserWhereInput>;
  total?: Maybe<Float>;
  total_not?: Maybe<Float>;
  total_in?: Maybe<Float[] | Float>;
  total_not_in?: Maybe<Float[] | Float>;
  total_lt?: Maybe<Float>;
  total_lte?: Maybe<Float>;
  total_gt?: Maybe<Float>;
  total_gte?: Maybe<Float>;
  products_some?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSaleWhereInput[] | ProductSaleWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  birthday_not?: Maybe<DateTimeInput>;
  birthday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_lt?: Maybe<DateTimeInput>;
  birthday_lte?: Maybe<DateTimeInput>;
  birthday_gt?: Maybe<DateTimeInput>;
  birthday_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  isMember?: Maybe<Boolean>;
  isMember_not?: Maybe<Boolean>;
  card?: Maybe<CardWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type SeatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TheaterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TheaterRoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TicketWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TicketWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  client?: Maybe<String>;
  client_not?: Maybe<String>;
  client_in?: Maybe<String[] | String>;
  client_not_in?: Maybe<String[] | String>;
  client_lt?: Maybe<String>;
  client_lte?: Maybe<String>;
  client_gt?: Maybe<String>;
  client_gte?: Maybe<String>;
  client_contains?: Maybe<String>;
  client_not_contains?: Maybe<String>;
  client_starts_with?: Maybe<String>;
  client_not_starts_with?: Maybe<String>;
  client_ends_with?: Maybe<String>;
  client_not_ends_with?: Maybe<String>;
  movie?: Maybe<MovieWhereInput>;
  total?: Maybe<Float>;
  total_not?: Maybe<Float>;
  total_in?: Maybe<Float[] | Float>;
  total_not_in?: Maybe<Float[] | Float>;
  total_lt?: Maybe<Float>;
  total_lte?: Maybe<Float>;
  total_gt?: Maybe<Float>;
  total_gte?: Maybe<Float>;
  seat?: Maybe<SeatWhereInput>;
  theaterRoom?: Maybe<TheaterRoomWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TicketWhereInput[] | TicketWhereInput>;
}

export type TicketSaleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TicketSaleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  theater?: Maybe<TheaterWhereInput>;
  user?: Maybe<UserWhereInput>;
  total?: Maybe<Float>;
  total_not?: Maybe<Float>;
  total_in?: Maybe<Float[] | Float>;
  total_not_in?: Maybe<Float[] | Float>;
  total_lt?: Maybe<Float>;
  total_lte?: Maybe<Float>;
  total_gt?: Maybe<Float>;
  total_gte?: Maybe<Float>;
  tickets_some?: Maybe<TicketWhereInput>;
  AND?: Maybe<TicketSaleWhereInput[] | TicketSaleWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CardCreateInput {
  id?: Maybe<ID_Input>;
  expiration: DateTimeInput;
  active?: Maybe<Boolean>;
  points?: Maybe<Int>;
}

export interface CardUpdateInput {
  expiration?: Maybe<DateTimeInput>;
  active?: Maybe<Boolean>;
  points?: Maybe<Int>;
}

export interface CardUpdateManyMutationInput {
  expiration?: Maybe<DateTimeInput>;
  active?: Maybe<Boolean>;
  points?: Maybe<Int>;
}

export interface EmployeeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  payrollNumber?: Maybe<Int>;
  status: EmployeeStatus;
  paymentDue?: Maybe<Float>;
  area: EmployeeArea;
  workDays?: Maybe<EmployeeCreateworkDaysInput>;
  theater: TheaterCreateOneWithoutEmployeesInput;
}

export interface EmployeeCreateworkDaysInput {
  set?: Maybe<Days[] | Days>;
}

export interface TheaterCreateOneWithoutEmployeesInput {
  create?: Maybe<TheaterCreateWithoutEmployeesInput>;
  connect?: Maybe<TheaterWhereUniqueInput>;
}

export interface TheaterCreateWithoutEmployeesInput {
  id?: Maybe<ID_Input>;
  name: String;
  state: String;
  city: String;
  address: String;
  billboard?: Maybe<MovieCreateManyInput>;
  theaterRooms?: Maybe<TheaterRoomCreateManyInput>;
}

export interface MovieCreateManyInput {
  create?: Maybe<MovieCreateInput[] | MovieCreateInput>;
  connect?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
}

export interface MovieCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  director: String;
  description: String;
  length: Int;
  rating: Rating;
  genre?: Maybe<MovieCreategenreInput>;
}

export interface MovieCreategenreInput {
  set?: Maybe<Genre[] | Genre>;
}

export interface TheaterRoomCreateManyInput {
  create?: Maybe<TheaterRoomCreateInput[] | TheaterRoomCreateInput>;
  connect?: Maybe<TheaterRoomWhereUniqueInput[] | TheaterRoomWhereUniqueInput>;
}

export interface TheaterRoomCreateInput {
  id?: Maybe<ID_Input>;
  name: Int;
  numberOfSeats: Int;
  price: Float;
  seats?: Maybe<SeatCreateManyInput>;
  type: TheaterType;
}

export interface SeatCreateManyInput {
  create?: Maybe<SeatCreateInput[] | SeatCreateInput>;
  connect?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
}

export interface SeatCreateInput {
  id?: Maybe<ID_Input>;
  row: String;
  number: Int;
  isOcuppied?: Maybe<Boolean>;
}

export interface EmployeeUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  payrollNumber?: Maybe<Int>;
  status?: Maybe<EmployeeStatus>;
  paymentDue?: Maybe<Float>;
  area?: Maybe<EmployeeArea>;
  workDays?: Maybe<EmployeeUpdateworkDaysInput>;
  theater?: Maybe<TheaterUpdateOneRequiredWithoutEmployeesInput>;
}

export interface EmployeeUpdateworkDaysInput {
  set?: Maybe<Days[] | Days>;
}

export interface TheaterUpdateOneRequiredWithoutEmployeesInput {
  create?: Maybe<TheaterCreateWithoutEmployeesInput>;
  update?: Maybe<TheaterUpdateWithoutEmployeesDataInput>;
  upsert?: Maybe<TheaterUpsertWithoutEmployeesInput>;
  connect?: Maybe<TheaterWhereUniqueInput>;
}

export interface TheaterUpdateWithoutEmployeesDataInput {
  name?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  address?: Maybe<String>;
  billboard?: Maybe<MovieUpdateManyInput>;
  theaterRooms?: Maybe<TheaterRoomUpdateManyInput>;
}

export interface MovieUpdateManyInput {
  create?: Maybe<MovieCreateInput[] | MovieCreateInput>;
  update?: Maybe<
    | MovieUpdateWithWhereUniqueNestedInput[]
    | MovieUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MovieUpsertWithWhereUniqueNestedInput[]
    | MovieUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  connect?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  set?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  disconnect?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  deleteMany?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
  updateMany?: Maybe<
    MovieUpdateManyWithWhereNestedInput[] | MovieUpdateManyWithWhereNestedInput
  >;
}

export interface MovieUpdateWithWhereUniqueNestedInput {
  where: MovieWhereUniqueInput;
  data: MovieUpdateDataInput;
}

export interface MovieUpdateDataInput {
  title?: Maybe<String>;
  director?: Maybe<String>;
  description?: Maybe<String>;
  length?: Maybe<Int>;
  rating?: Maybe<Rating>;
  genre?: Maybe<MovieUpdategenreInput>;
}

export interface MovieUpdategenreInput {
  set?: Maybe<Genre[] | Genre>;
}

export interface MovieUpsertWithWhereUniqueNestedInput {
  where: MovieWhereUniqueInput;
  update: MovieUpdateDataInput;
  create: MovieCreateInput;
}

export interface MovieScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  director?: Maybe<String>;
  director_not?: Maybe<String>;
  director_in?: Maybe<String[] | String>;
  director_not_in?: Maybe<String[] | String>;
  director_lt?: Maybe<String>;
  director_lte?: Maybe<String>;
  director_gt?: Maybe<String>;
  director_gte?: Maybe<String>;
  director_contains?: Maybe<String>;
  director_not_contains?: Maybe<String>;
  director_starts_with?: Maybe<String>;
  director_not_starts_with?: Maybe<String>;
  director_ends_with?: Maybe<String>;
  director_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  length?: Maybe<Int>;
  length_not?: Maybe<Int>;
  length_in?: Maybe<Int[] | Int>;
  length_not_in?: Maybe<Int[] | Int>;
  length_lt?: Maybe<Int>;
  length_lte?: Maybe<Int>;
  length_gt?: Maybe<Int>;
  length_gte?: Maybe<Int>;
  rating?: Maybe<Rating>;
  rating_not?: Maybe<Rating>;
  rating_in?: Maybe<Rating[] | Rating>;
  rating_not_in?: Maybe<Rating[] | Rating>;
  AND?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
  OR?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
  NOT?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
}

export interface MovieUpdateManyWithWhereNestedInput {
  where: MovieScalarWhereInput;
  data: MovieUpdateManyDataInput;
}

export interface MovieUpdateManyDataInput {
  title?: Maybe<String>;
  director?: Maybe<String>;
  description?: Maybe<String>;
  length?: Maybe<Int>;
  rating?: Maybe<Rating>;
  genre?: Maybe<MovieUpdategenreInput>;
}

export interface TheaterRoomUpdateManyInput {
  create?: Maybe<TheaterRoomCreateInput[] | TheaterRoomCreateInput>;
  update?: Maybe<
    | TheaterRoomUpdateWithWhereUniqueNestedInput[]
    | TheaterRoomUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TheaterRoomUpsertWithWhereUniqueNestedInput[]
    | TheaterRoomUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TheaterRoomWhereUniqueInput[] | TheaterRoomWhereUniqueInput>;
  connect?: Maybe<TheaterRoomWhereUniqueInput[] | TheaterRoomWhereUniqueInput>;
  set?: Maybe<TheaterRoomWhereUniqueInput[] | TheaterRoomWhereUniqueInput>;
  disconnect?: Maybe<
    TheaterRoomWhereUniqueInput[] | TheaterRoomWhereUniqueInput
  >;
  deleteMany?: Maybe<
    TheaterRoomScalarWhereInput[] | TheaterRoomScalarWhereInput
  >;
  updateMany?: Maybe<
    | TheaterRoomUpdateManyWithWhereNestedInput[]
    | TheaterRoomUpdateManyWithWhereNestedInput
  >;
}

export interface TheaterRoomUpdateWithWhereUniqueNestedInput {
  where: TheaterRoomWhereUniqueInput;
  data: TheaterRoomUpdateDataInput;
}

export interface TheaterRoomUpdateDataInput {
  name?: Maybe<Int>;
  numberOfSeats?: Maybe<Int>;
  price?: Maybe<Float>;
  seats?: Maybe<SeatUpdateManyInput>;
  type?: Maybe<TheaterType>;
}

export interface SeatUpdateManyInput {
  create?: Maybe<SeatCreateInput[] | SeatCreateInput>;
  update?: Maybe<
    | SeatUpdateWithWhereUniqueNestedInput[]
    | SeatUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SeatUpsertWithWhereUniqueNestedInput[]
    | SeatUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
  connect?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
  set?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
  disconnect?: Maybe<SeatWhereUniqueInput[] | SeatWhereUniqueInput>;
  deleteMany?: Maybe<SeatScalarWhereInput[] | SeatScalarWhereInput>;
  updateMany?: Maybe<
    SeatUpdateManyWithWhereNestedInput[] | SeatUpdateManyWithWhereNestedInput
  >;
}

export interface SeatUpdateWithWhereUniqueNestedInput {
  where: SeatWhereUniqueInput;
  data: SeatUpdateDataInput;
}

export interface SeatUpdateDataInput {
  row?: Maybe<String>;
  number?: Maybe<Int>;
  isOcuppied?: Maybe<Boolean>;
}

export interface SeatUpsertWithWhereUniqueNestedInput {
  where: SeatWhereUniqueInput;
  update: SeatUpdateDataInput;
  create: SeatCreateInput;
}

export interface SeatScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  row?: Maybe<String>;
  row_not?: Maybe<String>;
  row_in?: Maybe<String[] | String>;
  row_not_in?: Maybe<String[] | String>;
  row_lt?: Maybe<String>;
  row_lte?: Maybe<String>;
  row_gt?: Maybe<String>;
  row_gte?: Maybe<String>;
  row_contains?: Maybe<String>;
  row_not_contains?: Maybe<String>;
  row_starts_with?: Maybe<String>;
  row_not_starts_with?: Maybe<String>;
  row_ends_with?: Maybe<String>;
  row_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  isOcuppied?: Maybe<Boolean>;
  isOcuppied_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SeatScalarWhereInput[] | SeatScalarWhereInput>;
  OR?: Maybe<SeatScalarWhereInput[] | SeatScalarWhereInput>;
  NOT?: Maybe<SeatScalarWhereInput[] | SeatScalarWhereInput>;
}

export interface SeatUpdateManyWithWhereNestedInput {
  where: SeatScalarWhereInput;
  data: SeatUpdateManyDataInput;
}

export interface SeatUpdateManyDataInput {
  row?: Maybe<String>;
  number?: Maybe<Int>;
  isOcuppied?: Maybe<Boolean>;
}

export interface TheaterRoomUpsertWithWhereUniqueNestedInput {
  where: TheaterRoomWhereUniqueInput;
  update: TheaterRoomUpdateDataInput;
  create: TheaterRoomCreateInput;
}

export interface TheaterRoomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<Int>;
  name_not?: Maybe<Int>;
  name_in?: Maybe<Int[] | Int>;
  name_not_in?: Maybe<Int[] | Int>;
  name_lt?: Maybe<Int>;
  name_lte?: Maybe<Int>;
  name_gt?: Maybe<Int>;
  name_gte?: Maybe<Int>;
  numberOfSeats?: Maybe<Int>;
  numberOfSeats_not?: Maybe<Int>;
  numberOfSeats_in?: Maybe<Int[] | Int>;
  numberOfSeats_not_in?: Maybe<Int[] | Int>;
  numberOfSeats_lt?: Maybe<Int>;
  numberOfSeats_lte?: Maybe<Int>;
  numberOfSeats_gt?: Maybe<Int>;
  numberOfSeats_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  type?: Maybe<TheaterType>;
  type_not?: Maybe<TheaterType>;
  type_in?: Maybe<TheaterType[] | TheaterType>;
  type_not_in?: Maybe<TheaterType[] | TheaterType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TheaterRoomScalarWhereInput[] | TheaterRoomScalarWhereInput>;
  OR?: Maybe<TheaterRoomScalarWhereInput[] | TheaterRoomScalarWhereInput>;
  NOT?: Maybe<TheaterRoomScalarWhereInput[] | TheaterRoomScalarWhereInput>;
}

export interface TheaterRoomUpdateManyWithWhereNestedInput {
  where: TheaterRoomScalarWhereInput;
  data: TheaterRoomUpdateManyDataInput;
}

export interface TheaterRoomUpdateManyDataInput {
  name?: Maybe<Int>;
  numberOfSeats?: Maybe<Int>;
  price?: Maybe<Float>;
  type?: Maybe<TheaterType>;
}

export interface TheaterUpsertWithoutEmployeesInput {
  update: TheaterUpdateWithoutEmployeesDataInput;
  create: TheaterCreateWithoutEmployeesInput;
}

export interface EmployeeUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  payrollNumber?: Maybe<Int>;
  status?: Maybe<EmployeeStatus>;
  paymentDue?: Maybe<Float>;
  area?: Maybe<EmployeeArea>;
  workDays?: Maybe<EmployeeUpdateworkDaysInput>;
}

export interface MovieUpdateInput {
  title?: Maybe<String>;
  director?: Maybe<String>;
  description?: Maybe<String>;
  length?: Maybe<Int>;
  rating?: Maybe<Rating>;
  genre?: Maybe<MovieUpdategenreInput>;
}

export interface MovieUpdateManyMutationInput {
  title?: Maybe<String>;
  director?: Maybe<String>;
  description?: Maybe<String>;
  length?: Maybe<Int>;
  rating?: Maybe<Rating>;
  genre?: Maybe<MovieUpdategenreInput>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  stock: Int;
  price: Float;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  stock?: Maybe<Int>;
  price?: Maybe<Float>;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
  stock?: Maybe<Int>;
  price?: Maybe<Float>;
}

export interface ProductSaleCreateInput {
  id?: Maybe<ID_Input>;
  theater: TheaterCreateOneInput;
  user: UserCreateOneInput;
  total: Float;
  products?: Maybe<ProductCreateManyInput>;
}

export interface TheaterCreateOneInput {
  create?: Maybe<TheaterCreateInput>;
  connect?: Maybe<TheaterWhereUniqueInput>;
}

export interface TheaterCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  state: String;
  city: String;
  address: String;
  billboard?: Maybe<MovieCreateManyInput>;
  theaterRooms?: Maybe<TheaterRoomCreateManyInput>;
  employees?: Maybe<EmployeeCreateManyWithoutTheaterInput>;
}

export interface EmployeeCreateManyWithoutTheaterInput {
  create?: Maybe<
    EmployeeCreateWithoutTheaterInput[] | EmployeeCreateWithoutTheaterInput
  >;
  connect?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
}

export interface EmployeeCreateWithoutTheaterInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  payrollNumber?: Maybe<Int>;
  status: EmployeeStatus;
  paymentDue?: Maybe<Float>;
  area: EmployeeArea;
  workDays?: Maybe<EmployeeCreateworkDaysInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  birthday?: Maybe<DateTimeInput>;
  name: String;
  isMember?: Maybe<Boolean>;
  card?: Maybe<CardCreateOneInput>;
}

export interface CardCreateOneInput {
  create?: Maybe<CardCreateInput>;
  connect?: Maybe<CardWhereUniqueInput>;
}

export interface ProductCreateManyInput {
  create?: Maybe<ProductCreateInput[] | ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductSaleUpdateInput {
  theater?: Maybe<TheaterUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  total?: Maybe<Float>;
  products?: Maybe<ProductUpdateManyInput>;
}

export interface TheaterUpdateOneRequiredInput {
  create?: Maybe<TheaterCreateInput>;
  update?: Maybe<TheaterUpdateDataInput>;
  upsert?: Maybe<TheaterUpsertNestedInput>;
  connect?: Maybe<TheaterWhereUniqueInput>;
}

export interface TheaterUpdateDataInput {
  name?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  address?: Maybe<String>;
  billboard?: Maybe<MovieUpdateManyInput>;
  theaterRooms?: Maybe<TheaterRoomUpdateManyInput>;
  employees?: Maybe<EmployeeUpdateManyWithoutTheaterInput>;
}

export interface EmployeeUpdateManyWithoutTheaterInput {
  create?: Maybe<
    EmployeeCreateWithoutTheaterInput[] | EmployeeCreateWithoutTheaterInput
  >;
  delete?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
  connect?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
  set?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
  disconnect?: Maybe<EmployeeWhereUniqueInput[] | EmployeeWhereUniqueInput>;
  update?: Maybe<
    | EmployeeUpdateWithWhereUniqueWithoutTheaterInput[]
    | EmployeeUpdateWithWhereUniqueWithoutTheaterInput
  >;
  upsert?: Maybe<
    | EmployeeUpsertWithWhereUniqueWithoutTheaterInput[]
    | EmployeeUpsertWithWhereUniqueWithoutTheaterInput
  >;
  deleteMany?: Maybe<EmployeeScalarWhereInput[] | EmployeeScalarWhereInput>;
  updateMany?: Maybe<
    | EmployeeUpdateManyWithWhereNestedInput[]
    | EmployeeUpdateManyWithWhereNestedInput
  >;
}

export interface EmployeeUpdateWithWhereUniqueWithoutTheaterInput {
  where: EmployeeWhereUniqueInput;
  data: EmployeeUpdateWithoutTheaterDataInput;
}

export interface EmployeeUpdateWithoutTheaterDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  payrollNumber?: Maybe<Int>;
  status?: Maybe<EmployeeStatus>;
  paymentDue?: Maybe<Float>;
  area?: Maybe<EmployeeArea>;
  workDays?: Maybe<EmployeeUpdateworkDaysInput>;
}

export interface EmployeeUpsertWithWhereUniqueWithoutTheaterInput {
  where: EmployeeWhereUniqueInput;
  update: EmployeeUpdateWithoutTheaterDataInput;
  create: EmployeeCreateWithoutTheaterInput;
}

export interface EmployeeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  payrollNumber?: Maybe<Int>;
  payrollNumber_not?: Maybe<Int>;
  payrollNumber_in?: Maybe<Int[] | Int>;
  payrollNumber_not_in?: Maybe<Int[] | Int>;
  payrollNumber_lt?: Maybe<Int>;
  payrollNumber_lte?: Maybe<Int>;
  payrollNumber_gt?: Maybe<Int>;
  payrollNumber_gte?: Maybe<Int>;
  status?: Maybe<EmployeeStatus>;
  status_not?: Maybe<EmployeeStatus>;
  status_in?: Maybe<EmployeeStatus[] | EmployeeStatus>;
  status_not_in?: Maybe<EmployeeStatus[] | EmployeeStatus>;
  paymentDue?: Maybe<Float>;
  paymentDue_not?: Maybe<Float>;
  paymentDue_in?: Maybe<Float[] | Float>;
  paymentDue_not_in?: Maybe<Float[] | Float>;
  paymentDue_lt?: Maybe<Float>;
  paymentDue_lte?: Maybe<Float>;
  paymentDue_gt?: Maybe<Float>;
  paymentDue_gte?: Maybe<Float>;
  area?: Maybe<EmployeeArea>;
  area_not?: Maybe<EmployeeArea>;
  area_in?: Maybe<EmployeeArea[] | EmployeeArea>;
  area_not_in?: Maybe<EmployeeArea[] | EmployeeArea>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EmployeeScalarWhereInput[] | EmployeeScalarWhereInput>;
  OR?: Maybe<EmployeeScalarWhereInput[] | EmployeeScalarWhereInput>;
  NOT?: Maybe<EmployeeScalarWhereInput[] | EmployeeScalarWhereInput>;
}

export interface EmployeeUpdateManyWithWhereNestedInput {
  where: EmployeeScalarWhereInput;
  data: EmployeeUpdateManyDataInput;
}

export interface EmployeeUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  payrollNumber?: Maybe<Int>;
  status?: Maybe<EmployeeStatus>;
  paymentDue?: Maybe<Float>;
  area?: Maybe<EmployeeArea>;
  workDays?: Maybe<EmployeeUpdateworkDaysInput>;
}

export interface TheaterUpsertNestedInput {
  update: TheaterUpdateDataInput;
  create: TheaterCreateInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  isMember?: Maybe<Boolean>;
  card?: Maybe<CardUpdateOneInput>;
}

export interface CardUpdateOneInput {
  create?: Maybe<CardCreateInput>;
  update?: Maybe<CardUpdateDataInput>;
  upsert?: Maybe<CardUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CardWhereUniqueInput>;
}

export interface CardUpdateDataInput {
  expiration?: Maybe<DateTimeInput>;
  active?: Maybe<Boolean>;
  points?: Maybe<Int>;
}

export interface CardUpsertNestedInput {
  update: CardUpdateDataInput;
  create: CardCreateInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ProductUpdateManyInput {
  create?: Maybe<ProductCreateInput[] | ProductCreateInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueNestedInput[]
    | ProductUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueNestedInput[]
    | ProductUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateDataInput;
}

export interface ProductUpdateDataInput {
  name?: Maybe<String>;
  stock?: Maybe<Int>;
  price?: Maybe<Float>;
}

export interface ProductUpsertWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  stock?: Maybe<Int>;
  stock_not?: Maybe<Int>;
  stock_in?: Maybe<Int[] | Int>;
  stock_not_in?: Maybe<Int[] | Int>;
  stock_lt?: Maybe<Int>;
  stock_lte?: Maybe<Int>;
  stock_gt?: Maybe<Int>;
  stock_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductUpdateManyDataInput {
  name?: Maybe<String>;
  stock?: Maybe<Int>;
  price?: Maybe<Float>;
}

export interface ProductSaleUpdateManyMutationInput {
  total?: Maybe<Float>;
}

export interface SeatUpdateInput {
  row?: Maybe<String>;
  number?: Maybe<Int>;
  isOcuppied?: Maybe<Boolean>;
}

export interface SeatUpdateManyMutationInput {
  row?: Maybe<String>;
  number?: Maybe<Int>;
  isOcuppied?: Maybe<Boolean>;
}

export interface TheaterUpdateInput {
  name?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  address?: Maybe<String>;
  billboard?: Maybe<MovieUpdateManyInput>;
  theaterRooms?: Maybe<TheaterRoomUpdateManyInput>;
  employees?: Maybe<EmployeeUpdateManyWithoutTheaterInput>;
}

export interface TheaterUpdateManyMutationInput {
  name?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  address?: Maybe<String>;
}

export interface TheaterRoomUpdateInput {
  name?: Maybe<Int>;
  numberOfSeats?: Maybe<Int>;
  price?: Maybe<Float>;
  seats?: Maybe<SeatUpdateManyInput>;
  type?: Maybe<TheaterType>;
}

export interface TheaterRoomUpdateManyMutationInput {
  name?: Maybe<Int>;
  numberOfSeats?: Maybe<Int>;
  price?: Maybe<Float>;
  type?: Maybe<TheaterType>;
}

export interface TicketCreateInput {
  id?: Maybe<ID_Input>;
  client: String;
  movie: MovieCreateOneInput;
  total: Float;
  seat: SeatCreateOneInput;
  theaterRoom: TheaterRoomCreateOneInput;
}

export interface MovieCreateOneInput {
  create?: Maybe<MovieCreateInput>;
  connect?: Maybe<MovieWhereUniqueInput>;
}

export interface SeatCreateOneInput {
  create?: Maybe<SeatCreateInput>;
  connect?: Maybe<SeatWhereUniqueInput>;
}

export interface TheaterRoomCreateOneInput {
  create?: Maybe<TheaterRoomCreateInput>;
  connect?: Maybe<TheaterRoomWhereUniqueInput>;
}

export interface TicketUpdateInput {
  client?: Maybe<String>;
  movie?: Maybe<MovieUpdateOneRequiredInput>;
  total?: Maybe<Float>;
  seat?: Maybe<SeatUpdateOneRequiredInput>;
  theaterRoom?: Maybe<TheaterRoomUpdateOneRequiredInput>;
}

export interface MovieUpdateOneRequiredInput {
  create?: Maybe<MovieCreateInput>;
  update?: Maybe<MovieUpdateDataInput>;
  upsert?: Maybe<MovieUpsertNestedInput>;
  connect?: Maybe<MovieWhereUniqueInput>;
}

export interface MovieUpsertNestedInput {
  update: MovieUpdateDataInput;
  create: MovieCreateInput;
}

export interface SeatUpdateOneRequiredInput {
  create?: Maybe<SeatCreateInput>;
  update?: Maybe<SeatUpdateDataInput>;
  upsert?: Maybe<SeatUpsertNestedInput>;
  connect?: Maybe<SeatWhereUniqueInput>;
}

export interface SeatUpsertNestedInput {
  update: SeatUpdateDataInput;
  create: SeatCreateInput;
}

export interface TheaterRoomUpdateOneRequiredInput {
  create?: Maybe<TheaterRoomCreateInput>;
  update?: Maybe<TheaterRoomUpdateDataInput>;
  upsert?: Maybe<TheaterRoomUpsertNestedInput>;
  connect?: Maybe<TheaterRoomWhereUniqueInput>;
}

export interface TheaterRoomUpsertNestedInput {
  update: TheaterRoomUpdateDataInput;
  create: TheaterRoomCreateInput;
}

export interface TicketUpdateManyMutationInput {
  client?: Maybe<String>;
  total?: Maybe<Float>;
}

export interface TicketSaleCreateInput {
  id?: Maybe<ID_Input>;
  theater: TheaterCreateOneInput;
  user: UserCreateOneInput;
  total: Float;
  tickets?: Maybe<TicketCreateManyInput>;
}

export interface TicketCreateManyInput {
  create?: Maybe<TicketCreateInput[] | TicketCreateInput>;
  connect?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
}

export interface TicketSaleUpdateInput {
  theater?: Maybe<TheaterUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  total?: Maybe<Float>;
  tickets?: Maybe<TicketUpdateManyInput>;
}

export interface TicketUpdateManyInput {
  create?: Maybe<TicketCreateInput[] | TicketCreateInput>;
  update?: Maybe<
    | TicketUpdateWithWhereUniqueNestedInput[]
    | TicketUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TicketUpsertWithWhereUniqueNestedInput[]
    | TicketUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
  connect?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
  set?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
  disconnect?: Maybe<TicketWhereUniqueInput[] | TicketWhereUniqueInput>;
  deleteMany?: Maybe<TicketScalarWhereInput[] | TicketScalarWhereInput>;
  updateMany?: Maybe<
    | TicketUpdateManyWithWhereNestedInput[]
    | TicketUpdateManyWithWhereNestedInput
  >;
}

export interface TicketUpdateWithWhereUniqueNestedInput {
  where: TicketWhereUniqueInput;
  data: TicketUpdateDataInput;
}

export interface TicketUpdateDataInput {
  client?: Maybe<String>;
  movie?: Maybe<MovieUpdateOneRequiredInput>;
  total?: Maybe<Float>;
  seat?: Maybe<SeatUpdateOneRequiredInput>;
  theaterRoom?: Maybe<TheaterRoomUpdateOneRequiredInput>;
}

export interface TicketUpsertWithWhereUniqueNestedInput {
  where: TicketWhereUniqueInput;
  update: TicketUpdateDataInput;
  create: TicketCreateInput;
}

export interface TicketScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  client?: Maybe<String>;
  client_not?: Maybe<String>;
  client_in?: Maybe<String[] | String>;
  client_not_in?: Maybe<String[] | String>;
  client_lt?: Maybe<String>;
  client_lte?: Maybe<String>;
  client_gt?: Maybe<String>;
  client_gte?: Maybe<String>;
  client_contains?: Maybe<String>;
  client_not_contains?: Maybe<String>;
  client_starts_with?: Maybe<String>;
  client_not_starts_with?: Maybe<String>;
  client_ends_with?: Maybe<String>;
  client_not_ends_with?: Maybe<String>;
  total?: Maybe<Float>;
  total_not?: Maybe<Float>;
  total_in?: Maybe<Float[] | Float>;
  total_not_in?: Maybe<Float[] | Float>;
  total_lt?: Maybe<Float>;
  total_lte?: Maybe<Float>;
  total_gt?: Maybe<Float>;
  total_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TicketScalarWhereInput[] | TicketScalarWhereInput>;
  OR?: Maybe<TicketScalarWhereInput[] | TicketScalarWhereInput>;
  NOT?: Maybe<TicketScalarWhereInput[] | TicketScalarWhereInput>;
}

export interface TicketUpdateManyWithWhereNestedInput {
  where: TicketScalarWhereInput;
  data: TicketUpdateManyDataInput;
}

export interface TicketUpdateManyDataInput {
  client?: Maybe<String>;
  total?: Maybe<Float>;
}

export interface TicketSaleUpdateManyMutationInput {
  total?: Maybe<Float>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  isMember?: Maybe<Boolean>;
  card?: Maybe<CardUpdateOneInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  isMember?: Maybe<Boolean>;
}

export interface CardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CardWhereInput>;
  AND?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
}

export interface EmployeeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmployeeWhereInput>;
  AND?: Maybe<
    EmployeeSubscriptionWhereInput[] | EmployeeSubscriptionWhereInput
  >;
}

export interface MovieSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MovieWhereInput>;
  AND?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface ProductSaleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductSaleWhereInput>;
  AND?: Maybe<
    ProductSaleSubscriptionWhereInput[] | ProductSaleSubscriptionWhereInput
  >;
}

export interface SeatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SeatWhereInput>;
  AND?: Maybe<SeatSubscriptionWhereInput[] | SeatSubscriptionWhereInput>;
}

export interface TheaterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TheaterWhereInput>;
  AND?: Maybe<TheaterSubscriptionWhereInput[] | TheaterSubscriptionWhereInput>;
}

export interface TheaterRoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TheaterRoomWhereInput>;
  AND?: Maybe<
    TheaterRoomSubscriptionWhereInput[] | TheaterRoomSubscriptionWhereInput
  >;
}

export interface TicketSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TicketWhereInput>;
  AND?: Maybe<TicketSubscriptionWhereInput[] | TicketSubscriptionWhereInput>;
}

export interface TicketSaleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TicketSaleWhereInput>;
  AND?: Maybe<
    TicketSaleSubscriptionWhereInput[] | TicketSaleSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Card {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  expiration: DateTimeOutput;
  active: Boolean;
  points: Int;
}

export interface CardPromise extends Promise<Card>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  expiration: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
  points: () => Promise<Int>;
}

export interface CardSubscription
  extends Promise<AsyncIterator<Card>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  expiration: () => Promise<AsyncIterator<DateTimeOutput>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  points: () => Promise<AsyncIterator<Int>>;
}

export interface CardNullablePromise
  extends Promise<Card | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  expiration: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
  points: () => Promise<Int>;
}

export interface CardConnection {
  pageInfo: PageInfo;
  edges: CardEdge[];
}

export interface CardConnectionPromise
  extends Promise<CardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardEdge>>() => T;
  aggregate: <T = AggregateCardPromise>() => T;
}

export interface CardConnectionSubscription
  extends Promise<AsyncIterator<CardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CardEdge {
  node: Card;
  cursor: String;
}

export interface CardEdgePromise extends Promise<CardEdge>, Fragmentable {
  node: <T = CardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardEdgeSubscription
  extends Promise<AsyncIterator<CardEdge>>,
    Fragmentable {
  node: <T = CardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCard {
  count: Int;
}

export interface AggregateCardPromise
  extends Promise<AggregateCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardSubscription
  extends Promise<AsyncIterator<AggregateCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Employee {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  payrollNumber?: Int;
  status: EmployeeStatus;
  paymentDue?: Float;
  area: EmployeeArea;
  workDays: Days[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EmployeePromise extends Promise<Employee>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  payrollNumber: () => Promise<Int>;
  status: () => Promise<EmployeeStatus>;
  paymentDue: () => Promise<Float>;
  area: () => Promise<EmployeeArea>;
  workDays: () => Promise<Days[]>;
  theater: <T = TheaterPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EmployeeSubscription
  extends Promise<AsyncIterator<Employee>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  payrollNumber: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<EmployeeStatus>>;
  paymentDue: () => Promise<AsyncIterator<Float>>;
  area: () => Promise<AsyncIterator<EmployeeArea>>;
  workDays: () => Promise<AsyncIterator<Days[]>>;
  theater: <T = TheaterSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EmployeeNullablePromise
  extends Promise<Employee | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  payrollNumber: () => Promise<Int>;
  status: () => Promise<EmployeeStatus>;
  paymentDue: () => Promise<Float>;
  area: () => Promise<EmployeeArea>;
  workDays: () => Promise<Days[]>;
  theater: <T = TheaterPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Theater {
  id: ID_Output;
  name: String;
  state: String;
  city: String;
  address: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TheaterPromise extends Promise<Theater>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  state: () => Promise<String>;
  city: () => Promise<String>;
  address: () => Promise<String>;
  billboard: <T = FragmentableArray<Movie>>(args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  theaterRooms: <T = FragmentableArray<TheaterRoom>>(args?: {
    where?: TheaterRoomWhereInput;
    orderBy?: TheaterRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  employees: <T = FragmentableArray<Employee>>(args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TheaterSubscription
  extends Promise<AsyncIterator<Theater>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  billboard: <T = Promise<AsyncIterator<MovieSubscription>>>(args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  theaterRooms: <T = Promise<AsyncIterator<TheaterRoomSubscription>>>(args?: {
    where?: TheaterRoomWhereInput;
    orderBy?: TheaterRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  employees: <T = Promise<AsyncIterator<EmployeeSubscription>>>(args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TheaterNullablePromise
  extends Promise<Theater | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  state: () => Promise<String>;
  city: () => Promise<String>;
  address: () => Promise<String>;
  billboard: <T = FragmentableArray<Movie>>(args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  theaterRooms: <T = FragmentableArray<TheaterRoom>>(args?: {
    where?: TheaterRoomWhereInput;
    orderBy?: TheaterRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  employees: <T = FragmentableArray<Employee>>(args?: {
    where?: EmployeeWhereInput;
    orderBy?: EmployeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Movie {
  id: ID_Output;
  title: String;
  director: String;
  description: String;
  length: Int;
  rating: Rating;
  genre: Genre[];
}

export interface MoviePromise extends Promise<Movie>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  director: () => Promise<String>;
  description: () => Promise<String>;
  length: () => Promise<Int>;
  rating: () => Promise<Rating>;
  genre: () => Promise<Genre[]>;
}

export interface MovieSubscription
  extends Promise<AsyncIterator<Movie>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  director: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  length: () => Promise<AsyncIterator<Int>>;
  rating: () => Promise<AsyncIterator<Rating>>;
  genre: () => Promise<AsyncIterator<Genre[]>>;
}

export interface MovieNullablePromise
  extends Promise<Movie | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  director: () => Promise<String>;
  description: () => Promise<String>;
  length: () => Promise<Int>;
  rating: () => Promise<Rating>;
  genre: () => Promise<Genre[]>;
}

export interface TheaterRoom {
  id: ID_Output;
  name: Int;
  numberOfSeats: Int;
  price: Float;
  type: TheaterType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TheaterRoomPromise extends Promise<TheaterRoom>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<Int>;
  numberOfSeats: () => Promise<Int>;
  price: () => Promise<Float>;
  seats: <T = FragmentableArray<Seat>>(args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<TheaterType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TheaterRoomSubscription
  extends Promise<AsyncIterator<TheaterRoom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<Int>>;
  numberOfSeats: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  seats: <T = Promise<AsyncIterator<SeatSubscription>>>(args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<AsyncIterator<TheaterType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TheaterRoomNullablePromise
  extends Promise<TheaterRoom | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<Int>;
  numberOfSeats: () => Promise<Int>;
  price: () => Promise<Float>;
  seats: <T = FragmentableArray<Seat>>(args?: {
    where?: SeatWhereInput;
    orderBy?: SeatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  type: () => Promise<TheaterType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Seat {
  id: ID_Output;
  row: String;
  number: Int;
  isOcuppied: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SeatPromise extends Promise<Seat>, Fragmentable {
  id: () => Promise<ID_Output>;
  row: () => Promise<String>;
  number: () => Promise<Int>;
  isOcuppied: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SeatSubscription
  extends Promise<AsyncIterator<Seat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  row: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  isOcuppied: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SeatNullablePromise
  extends Promise<Seat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  row: () => Promise<String>;
  number: () => Promise<Int>;
  isOcuppied: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EmployeeConnection {
  pageInfo: PageInfo;
  edges: EmployeeEdge[];
}

export interface EmployeeConnectionPromise
  extends Promise<EmployeeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmployeeEdge>>() => T;
  aggregate: <T = AggregateEmployeePromise>() => T;
}

export interface EmployeeConnectionSubscription
  extends Promise<AsyncIterator<EmployeeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmployeeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmployeeSubscription>() => T;
}

export interface EmployeeEdge {
  node: Employee;
  cursor: String;
}

export interface EmployeeEdgePromise
  extends Promise<EmployeeEdge>,
    Fragmentable {
  node: <T = EmployeePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmployeeEdgeSubscription
  extends Promise<AsyncIterator<EmployeeEdge>>,
    Fragmentable {
  node: <T = EmployeeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmployee {
  count: Int;
}

export interface AggregateEmployeePromise
  extends Promise<AggregateEmployee>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmployeeSubscription
  extends Promise<AsyncIterator<AggregateEmployee>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MovieConnection {
  pageInfo: PageInfo;
  edges: MovieEdge[];
}

export interface MovieConnectionPromise
  extends Promise<MovieConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MovieEdge>>() => T;
  aggregate: <T = AggregateMoviePromise>() => T;
}

export interface MovieConnectionSubscription
  extends Promise<AsyncIterator<MovieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MovieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMovieSubscription>() => T;
}

export interface MovieEdge {
  node: Movie;
  cursor: String;
}

export interface MovieEdgePromise extends Promise<MovieEdge>, Fragmentable {
  node: <T = MoviePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MovieEdgeSubscription
  extends Promise<AsyncIterator<MovieEdge>>,
    Fragmentable {
  node: <T = MovieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMovie {
  count: Int;
}

export interface AggregateMoviePromise
  extends Promise<AggregateMovie>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMovieSubscription
  extends Promise<AsyncIterator<AggregateMovie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Product {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  stock: Int;
  price: Float;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  stock: () => Promise<Int>;
  price: () => Promise<Float>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  stock: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  stock: () => Promise<Int>;
  price: () => Promise<Float>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductSale {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  total: Float;
}

export interface ProductSalePromise extends Promise<ProductSale>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  theater: <T = TheaterPromise>() => T;
  user: <T = UserPromise>() => T;
  total: () => Promise<Float>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductSaleSubscription
  extends Promise<AsyncIterator<ProductSale>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  theater: <T = TheaterSubscription>() => T;
  user: <T = UserSubscription>() => T;
  total: () => Promise<AsyncIterator<Float>>;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductSaleNullablePromise
  extends Promise<ProductSale | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  theater: <T = TheaterPromise>() => T;
  user: <T = UserPromise>() => T;
  total: () => Promise<Float>;
  products: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password: String;
  birthday?: DateTimeOutput;
  name: String;
  isMember: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  isMember: () => Promise<Boolean>;
  card: <T = CardPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  isMember: () => Promise<AsyncIterator<Boolean>>;
  card: <T = CardSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  isMember: () => Promise<Boolean>;
  card: <T = CardPromise>() => T;
}

export interface ProductSaleConnection {
  pageInfo: PageInfo;
  edges: ProductSaleEdge[];
}

export interface ProductSaleConnectionPromise
  extends Promise<ProductSaleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductSaleEdge>>() => T;
  aggregate: <T = AggregateProductSalePromise>() => T;
}

export interface ProductSaleConnectionSubscription
  extends Promise<AsyncIterator<ProductSaleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductSaleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSaleSubscription>() => T;
}

export interface ProductSaleEdge {
  node: ProductSale;
  cursor: String;
}

export interface ProductSaleEdgePromise
  extends Promise<ProductSaleEdge>,
    Fragmentable {
  node: <T = ProductSalePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductSaleEdgeSubscription
  extends Promise<AsyncIterator<ProductSaleEdge>>,
    Fragmentable {
  node: <T = ProductSaleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProductSale {
  count: Int;
}

export interface AggregateProductSalePromise
  extends Promise<AggregateProductSale>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSaleSubscription
  extends Promise<AsyncIterator<AggregateProductSale>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SeatConnection {
  pageInfo: PageInfo;
  edges: SeatEdge[];
}

export interface SeatConnectionPromise
  extends Promise<SeatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SeatEdge>>() => T;
  aggregate: <T = AggregateSeatPromise>() => T;
}

export interface SeatConnectionSubscription
  extends Promise<AsyncIterator<SeatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SeatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSeatSubscription>() => T;
}

export interface SeatEdge {
  node: Seat;
  cursor: String;
}

export interface SeatEdgePromise extends Promise<SeatEdge>, Fragmentable {
  node: <T = SeatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SeatEdgeSubscription
  extends Promise<AsyncIterator<SeatEdge>>,
    Fragmentable {
  node: <T = SeatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSeat {
  count: Int;
}

export interface AggregateSeatPromise
  extends Promise<AggregateSeat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSeatSubscription
  extends Promise<AsyncIterator<AggregateSeat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TheaterConnection {
  pageInfo: PageInfo;
  edges: TheaterEdge[];
}

export interface TheaterConnectionPromise
  extends Promise<TheaterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TheaterEdge>>() => T;
  aggregate: <T = AggregateTheaterPromise>() => T;
}

export interface TheaterConnectionSubscription
  extends Promise<AsyncIterator<TheaterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TheaterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTheaterSubscription>() => T;
}

export interface TheaterEdge {
  node: Theater;
  cursor: String;
}

export interface TheaterEdgePromise extends Promise<TheaterEdge>, Fragmentable {
  node: <T = TheaterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TheaterEdgeSubscription
  extends Promise<AsyncIterator<TheaterEdge>>,
    Fragmentable {
  node: <T = TheaterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTheater {
  count: Int;
}

export interface AggregateTheaterPromise
  extends Promise<AggregateTheater>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTheaterSubscription
  extends Promise<AsyncIterator<AggregateTheater>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TheaterRoomConnection {
  pageInfo: PageInfo;
  edges: TheaterRoomEdge[];
}

export interface TheaterRoomConnectionPromise
  extends Promise<TheaterRoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TheaterRoomEdge>>() => T;
  aggregate: <T = AggregateTheaterRoomPromise>() => T;
}

export interface TheaterRoomConnectionSubscription
  extends Promise<AsyncIterator<TheaterRoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TheaterRoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTheaterRoomSubscription>() => T;
}

export interface TheaterRoomEdge {
  node: TheaterRoom;
  cursor: String;
}

export interface TheaterRoomEdgePromise
  extends Promise<TheaterRoomEdge>,
    Fragmentable {
  node: <T = TheaterRoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TheaterRoomEdgeSubscription
  extends Promise<AsyncIterator<TheaterRoomEdge>>,
    Fragmentable {
  node: <T = TheaterRoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTheaterRoom {
  count: Int;
}

export interface AggregateTheaterRoomPromise
  extends Promise<AggregateTheaterRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTheaterRoomSubscription
  extends Promise<AsyncIterator<AggregateTheaterRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Ticket {
  id: ID_Output;
  client: String;
  total: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TicketPromise extends Promise<Ticket>, Fragmentable {
  id: () => Promise<ID_Output>;
  client: () => Promise<String>;
  movie: <T = MoviePromise>() => T;
  total: () => Promise<Float>;
  seat: <T = SeatPromise>() => T;
  theaterRoom: <T = TheaterRoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TicketSubscription
  extends Promise<AsyncIterator<Ticket>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  client: () => Promise<AsyncIterator<String>>;
  movie: <T = MovieSubscription>() => T;
  total: () => Promise<AsyncIterator<Float>>;
  seat: <T = SeatSubscription>() => T;
  theaterRoom: <T = TheaterRoomSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TicketNullablePromise
  extends Promise<Ticket | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  client: () => Promise<String>;
  movie: <T = MoviePromise>() => T;
  total: () => Promise<Float>;
  seat: <T = SeatPromise>() => T;
  theaterRoom: <T = TheaterRoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TicketConnection {
  pageInfo: PageInfo;
  edges: TicketEdge[];
}

export interface TicketConnectionPromise
  extends Promise<TicketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TicketEdge>>() => T;
  aggregate: <T = AggregateTicketPromise>() => T;
}

export interface TicketConnectionSubscription
  extends Promise<AsyncIterator<TicketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TicketEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTicketSubscription>() => T;
}

export interface TicketEdge {
  node: Ticket;
  cursor: String;
}

export interface TicketEdgePromise extends Promise<TicketEdge>, Fragmentable {
  node: <T = TicketPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TicketEdgeSubscription
  extends Promise<AsyncIterator<TicketEdge>>,
    Fragmentable {
  node: <T = TicketSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTicket {
  count: Int;
}

export interface AggregateTicketPromise
  extends Promise<AggregateTicket>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTicketSubscription
  extends Promise<AsyncIterator<AggregateTicket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TicketSale {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  total: Float;
}

export interface TicketSalePromise extends Promise<TicketSale>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  theater: <T = TheaterPromise>() => T;
  user: <T = UserPromise>() => T;
  total: () => Promise<Float>;
  tickets: <T = FragmentableArray<Ticket>>(args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TicketSaleSubscription
  extends Promise<AsyncIterator<TicketSale>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  theater: <T = TheaterSubscription>() => T;
  user: <T = UserSubscription>() => T;
  total: () => Promise<AsyncIterator<Float>>;
  tickets: <T = Promise<AsyncIterator<TicketSubscription>>>(args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TicketSaleNullablePromise
  extends Promise<TicketSale | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  theater: <T = TheaterPromise>() => T;
  user: <T = UserPromise>() => T;
  total: () => Promise<Float>;
  tickets: <T = FragmentableArray<Ticket>>(args?: {
    where?: TicketWhereInput;
    orderBy?: TicketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TicketSaleConnection {
  pageInfo: PageInfo;
  edges: TicketSaleEdge[];
}

export interface TicketSaleConnectionPromise
  extends Promise<TicketSaleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TicketSaleEdge>>() => T;
  aggregate: <T = AggregateTicketSalePromise>() => T;
}

export interface TicketSaleConnectionSubscription
  extends Promise<AsyncIterator<TicketSaleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TicketSaleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTicketSaleSubscription>() => T;
}

export interface TicketSaleEdge {
  node: TicketSale;
  cursor: String;
}

export interface TicketSaleEdgePromise
  extends Promise<TicketSaleEdge>,
    Fragmentable {
  node: <T = TicketSalePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TicketSaleEdgeSubscription
  extends Promise<AsyncIterator<TicketSaleEdge>>,
    Fragmentable {
  node: <T = TicketSaleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTicketSale {
  count: Int;
}

export interface AggregateTicketSalePromise
  extends Promise<AggregateTicketSale>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTicketSaleSubscription
  extends Promise<AsyncIterator<AggregateTicketSale>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CardSubscriptionPayload {
  mutation: MutationType;
  node: Card;
  updatedFields: String[];
  previousValues: CardPreviousValues;
}

export interface CardSubscriptionPayloadPromise
  extends Promise<CardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardPreviousValuesPromise>() => T;
}

export interface CardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardPreviousValuesSubscription>() => T;
}

export interface CardPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  expiration: DateTimeOutput;
  active: Boolean;
  points: Int;
}

export interface CardPreviousValuesPromise
  extends Promise<CardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  expiration: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
  points: () => Promise<Int>;
}

export interface CardPreviousValuesSubscription
  extends Promise<AsyncIterator<CardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  expiration: () => Promise<AsyncIterator<DateTimeOutput>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  points: () => Promise<AsyncIterator<Int>>;
}

export interface EmployeeSubscriptionPayload {
  mutation: MutationType;
  node: Employee;
  updatedFields: String[];
  previousValues: EmployeePreviousValues;
}

export interface EmployeeSubscriptionPayloadPromise
  extends Promise<EmployeeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmployeePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmployeePreviousValuesPromise>() => T;
}

export interface EmployeeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmployeeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmployeeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmployeePreviousValuesSubscription>() => T;
}

export interface EmployeePreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  payrollNumber?: Int;
  status: EmployeeStatus;
  paymentDue?: Float;
  area: EmployeeArea;
  workDays: Days[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EmployeePreviousValuesPromise
  extends Promise<EmployeePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  payrollNumber: () => Promise<Int>;
  status: () => Promise<EmployeeStatus>;
  paymentDue: () => Promise<Float>;
  area: () => Promise<EmployeeArea>;
  workDays: () => Promise<Days[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EmployeePreviousValuesSubscription
  extends Promise<AsyncIterator<EmployeePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  payrollNumber: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<EmployeeStatus>>;
  paymentDue: () => Promise<AsyncIterator<Float>>;
  area: () => Promise<AsyncIterator<EmployeeArea>>;
  workDays: () => Promise<AsyncIterator<Days[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MovieSubscriptionPayload {
  mutation: MutationType;
  node: Movie;
  updatedFields: String[];
  previousValues: MoviePreviousValues;
}

export interface MovieSubscriptionPayloadPromise
  extends Promise<MovieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MoviePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MoviePreviousValuesPromise>() => T;
}

export interface MovieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MovieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MovieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MoviePreviousValuesSubscription>() => T;
}

export interface MoviePreviousValues {
  id: ID_Output;
  title: String;
  director: String;
  description: String;
  length: Int;
  rating: Rating;
  genre: Genre[];
}

export interface MoviePreviousValuesPromise
  extends Promise<MoviePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  director: () => Promise<String>;
  description: () => Promise<String>;
  length: () => Promise<Int>;
  rating: () => Promise<Rating>;
  genre: () => Promise<Genre[]>;
}

export interface MoviePreviousValuesSubscription
  extends Promise<AsyncIterator<MoviePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  director: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  length: () => Promise<AsyncIterator<Int>>;
  rating: () => Promise<AsyncIterator<Rating>>;
  genre: () => Promise<AsyncIterator<Genre[]>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  stock: Int;
  price: Float;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  stock: () => Promise<Int>;
  price: () => Promise<Float>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  stock: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface ProductSaleSubscriptionPayload {
  mutation: MutationType;
  node: ProductSale;
  updatedFields: String[];
  previousValues: ProductSalePreviousValues;
}

export interface ProductSaleSubscriptionPayloadPromise
  extends Promise<ProductSaleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductSalePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductSalePreviousValuesPromise>() => T;
}

export interface ProductSaleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSaleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSaleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductSalePreviousValuesSubscription>() => T;
}

export interface ProductSalePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  total: Float;
}

export interface ProductSalePreviousValuesPromise
  extends Promise<ProductSalePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  total: () => Promise<Float>;
}

export interface ProductSalePreviousValuesSubscription
  extends Promise<AsyncIterator<ProductSalePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  total: () => Promise<AsyncIterator<Float>>;
}

export interface SeatSubscriptionPayload {
  mutation: MutationType;
  node: Seat;
  updatedFields: String[];
  previousValues: SeatPreviousValues;
}

export interface SeatSubscriptionPayloadPromise
  extends Promise<SeatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SeatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SeatPreviousValuesPromise>() => T;
}

export interface SeatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SeatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SeatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SeatPreviousValuesSubscription>() => T;
}

export interface SeatPreviousValues {
  id: ID_Output;
  row: String;
  number: Int;
  isOcuppied: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SeatPreviousValuesPromise
  extends Promise<SeatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  row: () => Promise<String>;
  number: () => Promise<Int>;
  isOcuppied: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SeatPreviousValuesSubscription
  extends Promise<AsyncIterator<SeatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  row: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  isOcuppied: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TheaterSubscriptionPayload {
  mutation: MutationType;
  node: Theater;
  updatedFields: String[];
  previousValues: TheaterPreviousValues;
}

export interface TheaterSubscriptionPayloadPromise
  extends Promise<TheaterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TheaterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TheaterPreviousValuesPromise>() => T;
}

export interface TheaterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TheaterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TheaterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TheaterPreviousValuesSubscription>() => T;
}

export interface TheaterPreviousValues {
  id: ID_Output;
  name: String;
  state: String;
  city: String;
  address: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TheaterPreviousValuesPromise
  extends Promise<TheaterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  state: () => Promise<String>;
  city: () => Promise<String>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TheaterPreviousValuesSubscription
  extends Promise<AsyncIterator<TheaterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TheaterRoomSubscriptionPayload {
  mutation: MutationType;
  node: TheaterRoom;
  updatedFields: String[];
  previousValues: TheaterRoomPreviousValues;
}

export interface TheaterRoomSubscriptionPayloadPromise
  extends Promise<TheaterRoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TheaterRoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TheaterRoomPreviousValuesPromise>() => T;
}

export interface TheaterRoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TheaterRoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TheaterRoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TheaterRoomPreviousValuesSubscription>() => T;
}

export interface TheaterRoomPreviousValues {
  id: ID_Output;
  name: Int;
  numberOfSeats: Int;
  price: Float;
  type: TheaterType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TheaterRoomPreviousValuesPromise
  extends Promise<TheaterRoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<Int>;
  numberOfSeats: () => Promise<Int>;
  price: () => Promise<Float>;
  type: () => Promise<TheaterType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TheaterRoomPreviousValuesSubscription
  extends Promise<AsyncIterator<TheaterRoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<Int>>;
  numberOfSeats: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  type: () => Promise<AsyncIterator<TheaterType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TicketSubscriptionPayload {
  mutation: MutationType;
  node: Ticket;
  updatedFields: String[];
  previousValues: TicketPreviousValues;
}

export interface TicketSubscriptionPayloadPromise
  extends Promise<TicketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TicketPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TicketPreviousValuesPromise>() => T;
}

export interface TicketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TicketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TicketSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TicketPreviousValuesSubscription>() => T;
}

export interface TicketPreviousValues {
  id: ID_Output;
  client: String;
  total: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TicketPreviousValuesPromise
  extends Promise<TicketPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  client: () => Promise<String>;
  total: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TicketPreviousValuesSubscription
  extends Promise<AsyncIterator<TicketPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  client: () => Promise<AsyncIterator<String>>;
  total: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TicketSaleSubscriptionPayload {
  mutation: MutationType;
  node: TicketSale;
  updatedFields: String[];
  previousValues: TicketSalePreviousValues;
}

export interface TicketSaleSubscriptionPayloadPromise
  extends Promise<TicketSaleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TicketSalePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TicketSalePreviousValuesPromise>() => T;
}

export interface TicketSaleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TicketSaleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TicketSaleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TicketSalePreviousValuesSubscription>() => T;
}

export interface TicketSalePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  total: Float;
}

export interface TicketSalePreviousValuesPromise
  extends Promise<TicketSalePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  total: () => Promise<Float>;
}

export interface TicketSalePreviousValuesSubscription
  extends Promise<AsyncIterator<TicketSalePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  total: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password: String;
  birthday?: DateTimeOutput;
  name: String;
  isMember: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  isMember: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  isMember: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Card",
    embedded: false
  },
  {
    name: "Rating",
    embedded: false
  },
  {
    name: "Genre",
    embedded: false
  },
  {
    name: "Movie",
    embedded: false
  },
  {
    name: "Seat",
    embedded: false
  },
  {
    name: "Theater",
    embedded: false
  },
  {
    name: "TheaterType",
    embedded: false
  },
  {
    name: "TheaterRoom",
    embedded: false
  },
  {
    name: "Ticket",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "TicketSale",
    embedded: false
  },
  {
    name: "ProductSale",
    embedded: false
  },
  {
    name: "EmployeeStatus",
    embedded: false
  },
  {
    name: "EmployeeArea",
    embedded: false
  },
  {
    name: "Days",
    embedded: false
  },
  {
    name: "Employee",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["URL_BASE"]}/lgarcia/${process.env["ENVIRONMENT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
